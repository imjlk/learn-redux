import { createSlice, createAsyncThunk } from "@reduxjs/toolkit"
import { fetchChange } from "./testerAPI";

export const testerSlice = createSlice({
  name: 'tester',
  initialState: {
    value: 'Hello Redux',
    status: 'idle',
  },
  reducers: {
    changeHello: (state) => {
      state.value = 'Redux state changed'
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(changeHelloAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(changeHelloAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value = action.payload;
      });
  },
})

export const { changeHello } = testerSlice.actions

export const changeHelloAsync = createAsyncThunk(
  'tester/fetchChange',
  async (value) => {
    const response = await fetchChange(value);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export default testerSlice.reducer 
